

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_cron" WITH SCHEMA "pg_catalog";






CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."activities" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "advisor_id" "uuid" DEFAULT "gen_random_uuid"(),
    "client_id" "uuid" DEFAULT "gen_random_uuid"(),
    "prompt" "text",
    "output" "text",
    "message" "text"
);


ALTER TABLE "public"."activities" OWNER TO "postgres";


ALTER TABLE "public"."activities" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."activities_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."advisor" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "first_name" character varying,
    "last_name" character varying,
    "title" character varying,
    "bio" "text",
    "broad_scope" "json",
    "narrow_scope" "json",
    "languages" "json",
    "education" "json",
    "professional_background" "json",
    "certifications" "json",
    "awards" "json",
    "personal_interests" "json",
    "religion" "text",
    "social_profiles" "json",
    "current_company" "text",
    "personal_website" "text",
    "agency_website" "text",
    "mas" "text",
    "testinomial" "json",
    "gender" "text",
    "age_group" "text",
    "profile_img" "text",
    "tagline" "text",
    "secondary_images" "json",
    "active" boolean DEFAULT false
);


ALTER TABLE "public"."advisor" OWNER TO "postgres";


COMMENT ON TABLE "public"."advisor" IS 'Detail of advisors';



CREATE TABLE IF NOT EXISTS "public"."chat_suggestion" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "client_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "advisor_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "suggestions" "json"[] DEFAULT '{}'::"json"[],
    "last_message_id" "uuid"
);


ALTER TABLE "public"."chat_suggestion" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."client" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying,
    "all_answers" "json",
    "broad_scope" "json",
    "preferred_age_group" "json",
    "preferred_sex" "json",
    "preferred_language" "json",
    "preferred_religion" "json",
    "preferred_advisor" "json",
    "narrow_scope" "json",
    "phone_number" character varying(20),
    "preferred_contact_email" character varying(255),
    "telegram" character varying,
    "contents" "json"[],
    "is_admin" boolean DEFAULT false
);


ALTER TABLE "public"."client" OWNER TO "postgres";


COMMENT ON TABLE "public"."client" IS 'Detail of clients';



CREATE TABLE IF NOT EXISTS "public"."communications" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" DEFAULT "gen_random_uuid"(),
    "message" "text",
    "meta" "jsonb"
);


ALTER TABLE "public"."communications" OWNER TO "postgres";


COMMENT ON TABLE "public"."communications" IS 'Log for communications';



ALTER TABLE "public"."communications" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."communications_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."conversation_summaries" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "client_id" "uuid" NOT NULL,
    "advisor_id" "uuid" NOT NULL,
    "summary" "jsonb" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "last_message_id" "uuid"
);


ALTER TABLE "public"."conversation_summaries" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."conversation_summaries_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."conversation_summaries_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."conversation_summaries_id_seq" OWNED BY "public"."conversation_summaries"."id";



CREATE TABLE IF NOT EXISTS "public"."matchings" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "client_id" "uuid" DEFAULT "gen_random_uuid"(),
    "advisor_id" "uuid" DEFAULT "gen_random_uuid"(),
    "enabled" boolean DEFAULT true,
    "need_score" numeric,
    "personal_score" numeric,
    "total_score" numeric,
    "advisor_visibility" "json" DEFAULT '[]'::"json"
);


ALTER TABLE "public"."matchings" OWNER TO "postgres";


COMMENT ON TABLE "public"."matchings" IS 'Matching between advisor and client';



ALTER TABLE "public"."matchings" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."matchings_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."messages" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "message" "text" NOT NULL,
    "recipient" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "sender" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "files" "json",
    "is_read" boolean DEFAULT false
);


ALTER TABLE "public"."messages" OWNER TO "postgres";


COMMENT ON TABLE "public"."messages" IS 'table to store user messages';



ALTER TABLE ONLY "public"."activities"
    ADD CONSTRAINT "activities_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."advisor"
    ADD CONSTRAINT "advisor_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."chat_suggestion"
    ADD CONSTRAINT "chat_suggestion_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."client"
    ADD CONSTRAINT "client_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."communications"
    ADD CONSTRAINT "communications_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."chat_suggestion"
    ADD CONSTRAINT "constraint_name" UNIQUE ("client_id", "advisor_id");



ALTER TABLE ONLY "public"."conversation_summaries"
    ADD CONSTRAINT "conversation_summaries_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."matchings"
    ADD CONSTRAINT "matchings_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "message_pkey" PRIMARY KEY ("id");



CREATE INDEX "idx_client_advisor" ON "public"."conversation_summaries" USING "btree" ("client_id", "advisor_id");



CREATE OR REPLACE TRIGGER "matching-notification" AFTER DELETE ON "public"."matchings" FOR EACH ROW EXECUTE FUNCTION "supabase_functions"."http_request"('https://xpjrqmknieuxbnpilskz.supabase.co/functions/v1/match-notifications', 'POST', '{"Content-type":"application/json","Authorization":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhwanJxbWtuaWV1eGJucGlsc2t6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjcwNjkwNDksImV4cCI6MjA0MjY0NTA0OX0.cVN9jhrHfElQn8NGyDv-5N_IdcsuhYdxMdVwfE5CfSQ"}', '{}', '1000');



ALTER TABLE ONLY "public"."matchings"
    ADD CONSTRAINT "matchings_advisor_id_fkey" FOREIGN KEY ("advisor_id") REFERENCES "public"."advisor"("id");



ALTER TABLE ONLY "public"."matchings"
    ADD CONSTRAINT "matchings_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."client"("id");



CREATE POLICY "Allow admin read access" ON "public"."advisor" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."client"
  WHERE (("client"."id" = "auth"."uid"()) AND ("client"."is_admin" = true)))));



CREATE POLICY "Enable update for advisor based on email" ON "public"."advisor" FOR UPDATE USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Enable update for users based on email" ON "public"."client" FOR UPDATE USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Enable update for users based on email" ON "public"."matchings" FOR UPDATE USING (("auth"."uid"() = "client_id")) WITH CHECK (("auth"."uid"() = "client_id"));



CREATE POLICY "User can insert activities" ON "public"."activities" FOR INSERT WITH CHECK (("auth"."uid"() = "client_id"));



CREATE POLICY "Users and advisors can manage their summaries" ON "public"."conversation_summaries" USING ((("auth"."uid"() = "client_id") OR ("auth"."uid"() = "advisor_id")));



CREATE POLICY "Users can insert their own summaries" ON "public"."conversation_summaries" USING (("auth"."uid"() = "client_id"));



ALTER TABLE "public"."activities" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."advisor" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."chat_suggestion" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."client" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."communications" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."conversation_summaries" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."matchings" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."messages" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "sender can insert messages" ON "public"."messages" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "sender"));



CREATE POLICY "should add unique advisor with user id" ON "public"."advisor" FOR INSERT WITH CHECK (true);



CREATE POLICY "should be able to create client" ON "public"."client" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "should be able to query all advisor" ON "public"."advisor" FOR SELECT USING (true);



CREATE POLICY "should be able to query all clients" ON "public"."client" FOR SELECT USING (true);



CREATE POLICY "user can create matching" ON "public"."matchings" FOR INSERT WITH CHECK (("auth"."uid"() = "client_id"));



CREATE POLICY "user can edit is_read" ON "public"."messages" FOR UPDATE USING (("auth"."uid"() = "recipient")) WITH CHECK ((("id" = "id") AND ("created_at" = "created_at") AND ("message" = "message") AND ("recipient" = "recipient") AND ("sender" = "sender")));



CREATE POLICY "user can query its own messages" ON "public"."messages" FOR SELECT USING ((("auth"."uid"() = "sender") OR ("auth"."uid"() = "recipient")));



CREATE POLICY "user can query matchings" ON "public"."matchings" FOR SELECT USING ((("auth"."uid"() = "client_id") OR ("auth"."uid"() = "advisor_id")));



CREATE POLICY "user should query suggestions" ON "public"."chat_suggestion" FOR SELECT USING (("auth"."uid"() = "client_id"));



CREATE POLICY "user should update its suggestions" ON "public"."chat_suggestion" FOR INSERT WITH CHECK (("auth"."uid"() = "client_id"));



CREATE POLICY "user should upsert existing suggestions" ON "public"."chat_suggestion" FOR UPDATE USING (("auth"."uid"() = "client_id"));





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."messages";









GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



















































































































































































































































GRANT ALL ON TABLE "public"."activities" TO "anon";
GRANT ALL ON TABLE "public"."activities" TO "authenticated";
GRANT ALL ON TABLE "public"."activities" TO "service_role";



GRANT ALL ON SEQUENCE "public"."activities_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."activities_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."activities_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."advisor" TO "anon";
GRANT ALL ON TABLE "public"."advisor" TO "authenticated";
GRANT ALL ON TABLE "public"."advisor" TO "service_role";



GRANT ALL ON TABLE "public"."chat_suggestion" TO "anon";
GRANT ALL ON TABLE "public"."chat_suggestion" TO "authenticated";
GRANT ALL ON TABLE "public"."chat_suggestion" TO "service_role";



GRANT ALL ON TABLE "public"."client" TO "anon";
GRANT ALL ON TABLE "public"."client" TO "authenticated";
GRANT ALL ON TABLE "public"."client" TO "service_role";



GRANT ALL ON TABLE "public"."communications" TO "anon";
GRANT ALL ON TABLE "public"."communications" TO "authenticated";
GRANT ALL ON TABLE "public"."communications" TO "service_role";



GRANT ALL ON SEQUENCE "public"."communications_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."communications_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."communications_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."conversation_summaries" TO "anon";
GRANT ALL ON TABLE "public"."conversation_summaries" TO "authenticated";
GRANT ALL ON TABLE "public"."conversation_summaries" TO "service_role";



GRANT ALL ON SEQUENCE "public"."conversation_summaries_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."conversation_summaries_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."conversation_summaries_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."matchings" TO "anon";
GRANT ALL ON TABLE "public"."matchings" TO "authenticated";
GRANT ALL ON TABLE "public"."matchings" TO "service_role";



GRANT ALL ON SEQUENCE "public"."matchings_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."matchings_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."matchings_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."messages" TO "anon";
GRANT ALL ON TABLE "public"."messages" TO "authenticated";
GRANT ALL ON TABLE "public"."messages" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
